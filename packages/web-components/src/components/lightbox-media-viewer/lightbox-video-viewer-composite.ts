/**
 * @license
 *
 * Copyright IBM Corp. 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { html, property, customElement } from 'lit-element';
import ddsSettings from '@carbon/ibmdotcom-utilities/es/utilities/settings/settings.js';
import ifNonNull from 'carbon-web-components/es/globals/directives/if-non-null.js';
import KalturaPlayerAPI from '@carbon/ibmdotcom-services/es/services/KalturaPlayer/KalturaPlayer.js';
import { MediaData } from '../../internal/vendor/@carbon/ibmdotcom-services-store/types/kalturaPlayerAPI.d';
import DDSVideoPlayerComposite from '../video-player/video-player-composite';
import './lightbox-video-viewer';
import './lightbox-video-player';
import '../video-player/index';
import styles from './lightbox-video-player-composite.scss';

const { stablePrefix: ddsPrefix } = ddsSettings;

/**
 * Component that renders lightbox media viewer for video from its metadata, etc.
 *
 * @element dds-lightbox-video-viewer-composite
 */
@customElement(`${ddsPrefix}-lightbox-video-viewer-composite`)
class DDSLightboxVideoViewerComposite extends DDSVideoPlayerComposite {
  /**
   *
   */
  @property({ attribute: 'custom-video-name' })
  customVideoName?: string;

  /**
   *
   */
  @property({ attribute: 'custom-video-description' })
  customVideoDescription?: string;

  /**
   * The video player.
   */
  // protected get _videoPlayer() {
  //   const { selectorVideoPlayer } = this.constructor as typeof DDSLightboxVideoViewerComposite;
  //   return (this.renderRoot as Element)?.querySelector?.(selectorVideoPlayer);
  // }

  renderLightDOM() {
    const { selectorVideoPlayer } = this.constructor as typeof DDSLightboxVideoViewerComposite;
    console.log(
      'lightbox-video-viewer-composite',
      'this',
      this,
      'selectorVideoPlayer',
      selectorVideoPlayer,
      '(this as Element)?.querySelector?.(selectorVideoPlayer)',
      (this as Element)?.querySelector?.(selectorVideoPlayer),
      'this._videoPlayer',
      this._videoPlayer
    );
    const {
      aspectRatio,
      formatCaption,
      formatDuration,
      customVideoName,
      hideCaption,
      mediaData = {},
      videoId,
      customVideoDescription,
      thumbnail,
      videoThumbnailWidth,
    } = this;
    const { [videoId]: currentVideoData = {} as MediaData } = mediaData;
    const { description, duration, name } = currentVideoData;
    const videoName = customVideoName || name;
    const videoDescription = customVideoDescription || description;
    const thumbnailUrl =
      thumbnail ||
      KalturaPlayerAPI.getThumbnailUrl({
        mediaId: videoId,
        width: String(videoThumbnailWidth),
      });
    return html`
      <dds-lightbox-video-player
        description="${ifNonNull(videoDescription)}"
        duration="${ifNonNull(duration)}"
        name="${ifNonNull(videoName)}"
        ?hide-caption="${hideCaption}"
        .formatCaption="${ifNonNull(formatCaption)}"
        .formatDuration="${ifNonNull(formatDuration)}"
      >
        <dds-video-player
          duration="${ifNonNull(duration)}"
          ?hide-caption=${hideCaption}
          name="${ifNonNull(videoName)}"
          video-description="${ifNonNull(customVideoDescription)}"
          thumbnail-url="${ifNonNull(thumbnailUrl)}"
          video-id="${ifNonNull(videoId)}"
          aspect-ratio="${ifNonNull(aspectRatio)}"
          .formatCaption="${ifNonNull(formatCaption)}"
          .formatDuration="${ifNonNull(formatDuration)}"
          playing-mode="inline"
        >
        </dds-video-player>
      </dds-lightbox-video-player>
      <!-- TODO: remove -->
    `;
  }

  /**
   * A selector selecting the video player component.
   */
  // static get selectorVideoPlayer() {
  //   return `${ddsPrefix}-lightbox-video-player`;
  // }

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader
}

/* @__GENERATE_REACT_CUSTOM_ELEMENT_TYPE__ */
export default DDSLightboxVideoViewerComposite;
